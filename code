import numpy as np
import pandas as pd
import pymysql
import cx_Oracle
from sqlalchemy import create_engine
import os
import datetime
import sys
from datetime import date, timedelta
from numba import jit

'''  UTF-8 encoding '''
os.environ["NLS_LANG"] = ".AL32UTF8"

def daterange(start_date, end_date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + timedelta(n)


start_date = date(2021, 2, 1)
end_date = date(2021, 2, 2)


engine= create_engine('mysql+pymysql://id:pw@localhost/name?charset=utf8', encoding='utf-8')
connection = engine.connect()
nn = pd.read_sql("select AREA_ID, ITEM_NM from PROTOCOL_SPEC where SYS_ID = 102 and DATA_TYPE_ID = 1 and SEQ_SUB_ID != 0 and ITEM_NM not like '%%V%%' group by 2", connection)

from datetime import date, timedelta

def progress(nn):
    for n in range(len(nn)):
        area = nn['AREA_ID'][n]
        name = nn['DEV_NM'][n]
        yield area, name


def test(date):
    sdate = date.strftime("%Y%m%d000000000")
    edate = (date + timedelta(days=1)).strftime("%Y%m%d000000000")
    print(sdate, edate)


    for item in progress(nn):
        area = item[0]
        name = item[1]

        test = pd.read_sql("select * from table_name where area_id = '%s' and dev_nm like '%s' and date(dtct_ts) >= '%s' and date(dtct_ts) < '%s'" % (area, name,sdate, edate),   connection)

        connection.close()

        
        VV = test[['AREA_ID', 'DEV_GUBUN', 'DEV_NM','DTCT_TS','MAJOR_TX_VOLT','MAJOR_TX_VOLT_STATE','MINR_TX_VOLT','MINR_TX_VOLT_STATE','MAJOR_RX_VOLT','MAJOR_RX_VOLT_STATE','MINR_RX_VOLT','MINR_RX_VOLT_STATE']]

        VV=VV.set_index('DTCT_TS')
        
        list_ = ['MAJOR_TX_VOLT', 'MINR_TX_VOLT', 'MAJOR_RX_VOLT', 'MINR_RX_VOLT']

        df= pd.DataFrame()
        
        def asd(a, VV):
            df_summary = pd.DataFrame()
            df_summary[f'{a}_MIN'] = VV[a].resample('1H').min()
            df_summary[f'{a}_MAX'] = VV[a].resample('1H').max()
            df_summary[f'{a}_AVG'] = VV[a].resample('1H').mean().round(2)
            df_summary[f'{a}_VAR'] = VV[a].resample('1H').var().round(2)
            df_summary[f'{a}_STD'] = VV[a].resample('1H').std().round(2)
            df_summary[f'{a}_ERROR'] = VV[VV[f'{a}_STATE'] != '300_001'][f'{a}_STATE'].resample('1H').count()
            return df_summary

        list_ = ['MAJOR_TX_VOLT', 'MINR_TX_VOLT', 'MAJOR_RX_VOLT', 'MINR_RX_VOLT']

        for i in list_:
            df = pd.concat([df, asd(i, VV)], axis=1)
        
        df['AREA_ID'] = VV['AREA_ID'].iloc[0]
        df['DEV_GUBUN'] = VV['DEV_GUBUN'].iloc[0]
        df['DEV_NM'] = VV['DEV_NM'].iloc[0]

        local_mariasql_url = create_engine('mysql+pymysql://id:pw@localhost/name?charset=utf8',encoding='utf-8')
        df.to_sql(name='table_name', con=local_mariasql_url, index=False, if_exists='append')
        print(item, '+ ==========  end =========')  
    
for single_date in daterange(start_date, end_date):
    test(single_date)
